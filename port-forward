#!/bin/bash
# Proxmox Hook Script for port forwarding

set -eu

VMID=$1
PHASE=$2

# System specific parameters
BRIDGE=""
HOSTADDR=""

# Exit if not relevant phase
if [[ $PHASE != "post-start" && "$PHASE" == "pre-stop" ]]; then
	exit
fi

service_exists() {
	# Expects param 1 to be the service name
	if [[ systemctl list-unit-files "$1.service" >/dev/null ]]; then
		return 0
	else
		return 1
	fi
}

mod_iptables() {
	#Adds or removes iptables rules - paramters are action and rule. Use 'add' to add rule, anything else to remove it. Recommend 'remov' or 'delet' for logging purposes
	if [[ "$1"=="add" ]]; then
		ACTION="-A"
	else
		ACTION="-D"
	fi
	iptables -t nat $MODE PREROUTING $2 && echo "iptables rule $2 $1ed" || echo "Error $1ing rule $2"
}

add_forward() {
	FWFM=$1
	FWPR=$2
	FWSRC=$3
	FWTO=$4
	FWPORT=$5

	if [[ service_exists socat-forwarder ]]; then
		# Start a systemd service to forward the ports with socat
		systemctl start "socat-forwarder-$FWPROTO@$FWORIGPORT-$FWTOADDR:$FWTOPORT"
	else
		# Use iptables rules to forward the port
		mod_iptables "add" "-p $FWPROTO -d $FWORIGADDR -m $FWPROTO --dport $FWORIGPORT -j DNAT --to-destination $FWTOADDR:$FWTOPORT"
	fi
}

remove_forward() {
	FWORIGADDR=$1
	FWPROTO=$2
	FWORIGPORT=$3
	FWTOADDR=$4
	FWTOPORT=${5:-4}

	if [[ service_exists "socat-forwarder-$FWPROTO" ]]; then
		# Stop a systemd service to forward the ports with socat
		systemctl stop "socat-forwarder-$FWPROTO@$FWORIGPORT-$FWTOADDR:$FWTOPORT"
	else
		# Use iptables rules to forward the port
		mod_iptables "remov" "-p $FWPROTO -d $FWORIGADDR -m $FWPROTO --dport $FWORIGPORT -j DNAT --to-destination $FWTOADDR:$FWTOPORT"
	fi
}

# Determine Host address to use (for iptables rules) if not already set
if [[ -z "$HOSTADDR" ]]; then
	if [[ -z "$BRIDGE" ]]; then
		HOSTADDR=$(ip addr show | grep -Eo 'inet\s+\S+/' | sed 's/^.*inet\s//;s|/||' | grep -v '^127\.' | head -n 1)
	else
		HOSTADDR=$(ip addr show dev $BRIDGE | grep -Eo 'inet\s+\S+/' | sed 's/^.*inet\s//;s|/||' | grep -v '^127\.' | head -n 1)
	fi
fi

# Get configuration information for machine
DESC=$($(qm config $VMID 2>/dev/null || pct config $VMID) | grep "^description" | sed 's/^.*: //')
# Find the first IP address statically configured in config
ADDRESS=$($(qm config $VMID 2>/dev/null || pct config $VMID) | grep "^net" | sed 's/^.*: //' | grep -Po '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b' | head -n 1)

echo "Port forward script running $PHASE for $VMID and detected parameters as Host: $HOSTADDR, Bridge: $BRIDGE, VM Addr: $ADDRESS"
# Extract port forwarding configuration from description
# Extracts data lines from a line ending with "port-forwards:" to a double new line and converts encoded symbols
FWDDATA=$(echo "$DESC" | sed 's/^.*port-forwards(?:%3A)?%0A//I;s/%0A%0A.*$//Ig;s/;s/%3A/:/g;s/%0A/\n/g')

# If no data was found, exit the hook
if [[ -z "$FWDDATA" ]]; then
	exit
fi

PROTO="tcp"
echo "$FWDDATA" | while read linedata
do
	# Look for line updating the address to use (will override anything found from net config lookups)
	if [[ "$linedata" =~ "addr.*:.+" ]]; then
		# Extract an IPv4 address - use this as destination until updated
		ADDRESS=$(echo "$linedata" | grep -Po '\b\d{1,3}\.\d{1.3}\.\d{1.3}\.\d{1.3}\b')
	# Look for protocol type in line - use this as the protocol until changed
	elif [[ "$lineaddr" =~ "tcp" ]]; then
		PROTO="tcp"
	elif [[ "$lineaddr" =~ "udp" ]]; then
		PROTO="udp"
	elif [[ "$lineaddr" =~ ^[^0-9]*[0-9]{1,5}[^0-9]+[0-9]{1,5}[^0-9]*$ ]]; then
		# Line contains two 1-5 digit numbers separated by non-digits
		SPORT=$(echo "$linedata" | sed -E 's/^*[0-9]*([0-9]+)[^0-9]+([0-9]+)[0-9]*$/\1/')
		DPORT=$(echo "$linedata" | sed -E 's/^*[0-9]*([0-9]+)[^0-9]+([0-9]+)[0-9]*$/\2/')
		if [[ "$PHASE" == "post-start" ]]; then
			add_forward $HOSTADDR $PROTO $SPORT $ADDRESS $DPORT
		elif [[ "$PHASE" == "pre-stop" ]]; then
			remove_forward $HOSTADDR $PROTO $SPORT $ADDRESS $DPORT
		fi
	fi
done